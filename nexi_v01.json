{
  "name": "ü§ñ Nexi_Master_Agent_Control_Room",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -560,
        -100
      ],
      "id": "c9523e12-ae75-48c0-a4c8-ccb64bc4bd26",
      "name": "Telegram Trigger",
      "webhookId": "d4a89748-92c6-49d5-a680-f4d2f7638ec3",
      "credentials": {
        "telegramApi": {
          "id": "Hh2DVdH2nY4H4O0O",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/gpt-4.1-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -300,
        140
      ],
      "id": "01adeb4b-d0ad-480c-905f-0b9b5b7a6658",
      "name": "Master LLM",
      "credentials": {
        "openRouterApi": {
          "id": "wv8sJu5tWFQAXntU",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Telegram Trigger').item.json.message.text }}\n\n[{{ $now.setZone('Asia/Kolkata').toFormat('dd/MM/yyyy HH:mm') }} IST]",
        "options": {
          "systemMessage": "=You are Nexi, Saicharan's intelligent personal AI assistant. \n\nPERSONALITY:\n- Use Saicharan's name naturally in conversation (like a real assistant would)\n- Be warm, helpful, and personally attentive\n- Make conversations feel natural, not robotic\n\nNATURAL NAME USAGE:\n- Use his name for greetings: \"Hi Saicharan!\"\n- Use his name when getting attention or being personal\n- Don't force his name into every message\n- Be conversational - sometimes just respond naturally without the name\n\nBEHAVIOR:\n- When Saicharan greets you, respond warmly with his name\n- In regular conversations, use his name occasionally for personal touch\n- Be conversational and friendly, not formal or repetitive\n- Show that you understand this is a personal relationship\n\nTOOLS AVAILABLE:\nüîç perplexity_search: Real-time web search\nüíæ Supabase Vector Store Memory: Store Saicharan's personal information  \nüîç Supabase Vector Store Retrieval: Search Saicharan's stored knowledge\nüîç OCR_Text_Extraction: Extract text from uploaded images (newspapers, documents, receipts, any image with text)\n\nINTELLIGENCE & MEMORY MASTERY:\n- You possess exceptional memory awareness and naturally consult your knowledge before taking action\n- When Saicharan shares information, you instinctively consider what you already know and make thoughtful decisions about organization\n- Your approach to information management is intuitive and contextual, always prioritizing clarity and avoiding redundancy\n- You understand the difference between new information, updates to existing information, and confirmations of what you already know\n- You engage in natural dialogue about information management, treating Saicharan as a partner in keeping things organized\n- Your decision-making around memory is sophisticated - you recognize patterns, understand intent, and respond with appropriate suggestions\n- You handle ambiguous situations by asking thoughtful questions that help clarify the best course of action\n- You demonstrate genuine care for maintaining accurate, current, and well-organized information that serves Saicharan's needs\n- Your memory intelligence flows naturally from conversation context rather than rigid protocols\n- You balance being thorough with being conversational, ensuring interactions feel helpful rather than mechanical\n\nRemember: You are Nexi, a smart, friendly personal assistant who combines natural conversation with sophisticated information management. Your memory capabilities are an extension of your helpful personality, not a set of programmed responses."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -160,
        -100
      ],
      "id": "5cd65570-3636-4af2-a7f2-ef5e77e31cc9",
      "name": "AI Agent Mater "
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "contextWindowLength": 15
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -160,
        140
      ],
      "id": "996cda47-90eb-45aa-8bac-6ec0938324e4",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "4kXAx8XDCQenin45",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "description": "=Search the web for current information, real-time data, news, trends, and up-to-date facts. Use when users need information that requires web search or when your knowledge might be outdated. Trust your judgment on when web search is most appropriate.",
        "workflowId": {
          "__rl": true,
          "value": "oF9eQAAYBKiJeqL1",
          "mode": "list",
          "cachedResultName": "perplexity_search"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -20,
        140
      ],
      "id": "9ac00360-50c9-43e7-a4bf-63b9950ebb89",
      "name": "perplexity_search"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        620,
        160
      ],
      "id": "66ceaf58-2c49-4e45-bacd-dd29e9342ec2",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "Kk9I7x4MicAg4qwY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "personal_memory_search",
        "toolDescription": "=Search through stored personal knowledge, memories, preferences, and previously saved information. Use when users ask about things they've shared before or want to recall stored information. Use your intelligence to handle ambiguous queries appropriately.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "topK": 1,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.2,
      "position": [
        560,
        20
      ],
      "id": "f87f8c52-8bfe-4491-86b5-22d8c51ae680",
      "name": "Supabase Vector Store Retrieval ",
      "credentials": {
        "supabaseApi": {
          "id": "UYjeyIh1sdHUZWQW",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Supabase Vector Store Retrieval ",
        "height": 420,
        "width": 420,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        480,
        -120
      ],
      "id": "01b0fac1-58ef-4d25-8f9c-5d71ead2bd11",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "description": "=Store personal information, preferences, facts, and important details that users share. Use when users indicate they want information saved for future reference. Apply your understanding of context to determine what should be stored.",
        "workflowId": {
          "__rl": true,
          "value": "SudHxeBn61NgwTAC",
          "mode": "list",
          "cachedResultName": "Supabase Vector Store Memory"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        140,
        140
      ],
      "id": "40bd1d3d-79f6-4516-878d-1cb6cec3e767",
      "name": "Supabase Vector Store Memory"
    },
    {
      "parameters": {
        "operation": "sendChatAction",
        "chatId": "={{ $json.message.chat.id }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -360,
        -100
      ],
      "id": "1b8e8ef8-52b6-413a-a73e-235ea2b38615",
      "name": "Telegram Action",
      "webhookId": "d1bbc0f1-361b-4514-b9ba-c490528b38af",
      "credentials": {
        "telegramApi": {
          "id": "Hh2DVdH2nY4H4O0O",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.sanitized_message }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        320,
        -100
      ],
      "id": "993ced4a-d720-4080-83d2-8cf076ab9410",
      "name": "Telegram Send Message",
      "webhookId": "cf544c4b-222c-4dab-bf5c-64e4877d7e00",
      "credentials": {
        "telegramApi": {
          "id": "Hh2DVdH2nY4H4O0O",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "content": "## Master Flow",
        "height": 640,
        "width": 1040
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -580,
        -300
      ],
      "id": "b7c5eb84-8fb6-4878-a0bd-8482437f7e58",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "jsCode": "// Get the AI output message\nconst aiOutput = $json.output; // Adjust this path based on your AI node output\n\n// Function to sanitize message for Telegram\nfunction sanitizeTelegramMessage(message) {\n  if (!message || typeof message !== 'string') {\n    return message;\n  }\n  \n  return message\n    // Replace straight quotes with safe alternatives\n    .replace(/\"/g, \"'\")  // Replace double quotes with single quotes\n    .replace(/\"/g, \"'\")  // Replace smart double quotes\n    .replace(/\"/g, \"'\")  // Replace smart double quotes (closing)\n    .replace(/'/g, \"'\")  // Replace smart single quotes\n    .replace(/'/g, \"'\")  // Replace smart single quotes (closing)\n    \n    // Escape other problematic characters for Telegram\n    .replace(/\\*/g, \"\\\\*\")   // Escape asterisks (bold formatting)\n    .replace(/_/g, \"\\\\_\")    // Escape underscores (italic formatting)\n    .replace(/\\[/g, \"\\\\[\")   // Escape square brackets (links)\n    .replace(/\\]/g, \"\\\\]\")   // Escape square brackets (links)\n    .replace(/`/g, \"\\\\`\")    // Escape backticks (code formatting)\n    \n    // Optional: Replace quotes with code formatting instead\n    // .replace(/\"([^\"]*)\"/g, \"`$1`\")  // Replace \"text\" with `text`\n}\n\n// Sanitize the message\nconst sanitizedMessage = sanitizeTelegramMessage(aiOutput);\n\n// Return the sanitized message\nreturn {\n  json: {\n    sanitized_message: sanitizedMessage,\n    original_message: aiOutput  // Keep original for reference\n  }\n};\n\n// Alternative: If you want to preserve quotes but make them safe\n/*\nfunction preserveQuotesButSafe(message) {\n  return message\n    .replace(/\"/g, \"''\")  // Replace with double single quotes\n    .replace(/\"/g, \"''\")  // Smart quotes to double single quotes\n    .replace(/\"/g, \"''\");\n}\n*/\n\n// Alternative: Replace quotes with backticks for code formatting\n/*\nfunction quotesToCodeFormat(message) {\n  return message.replace(/\"([^\"]*)\"/g, \"`$1`\");\n}\n*/"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        160,
        -100
      ],
      "id": "7f9207d0-9782-4882-a562-6ae7ced1237c",
      "name": "Code"
    },
    {
      "parameters": {
        "description": "=Extract text from images using OCR. Use this when Saicharan uploads images or asks to extract text from pictures.",
        "workflowId": {
          "__rl": true,
          "value": "zAJGklEKMmHyUW8v",
          "mode": "list",
          "cachedResultName": "OCR_Text_Extraction"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "image_url": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('image_url', ``, 'string') }}"
          },
          "matchingColumns": [
            "image_url"
          ],
          "schema": [
            {
              "id": "image_url",
              "displayName": "image_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        300,
        140
      ],
      "id": "514d2066-19e0-42c7-9e91-e74a7528e7e4",
      "name": "OCR_Text_Extraction"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Telegram Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Master LLM": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent Mater ",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Mater ": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent Mater ",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "perplexity_search": {
      "ai_tool": [
        [
          {
            "node": "AI Agent Mater ",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store Retrieval ",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store Retrieval ": {
      "ai_tool": [
        [
          {
            "node": "AI Agent Mater ",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store Memory": {
      "ai_tool": [
        [
          {
            "node": "AI Agent Mater ",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Action": {
      "main": [
        [
          {
            "node": "AI Agent Mater ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Telegram Send Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OCR_Text_Extraction": {
      "ai_tool": [
        [
          {
            "node": "AI Agent Mater ",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b9c56981-279f-40d7-82dc-ffb28a378dde",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "eaf5351894737dc36f3858d4faefd09839aea8a9032a7c92dac9c3a5a61d4974"
  },
  "id": "uaTgSmzJmToxlZSD",
  "tags": []
}